// server.js
const express = require("express");
const cors = require("cors");
const axios = require("axios");
const morgan = require("morgan");
const compression = require("compression");
const crypto = require("crypto");
const path = require("path");
const nodemailer = require("nodemailer");


const app = express();

// üîÅ –ö—ç—à –≤ –ø–∞–º—è—Ç–∏ –Ω–∞ 10 —Å–µ–∫—É–Ω–¥
let carCache = {
  data: null,
  timestamp: 0,
  duration: 10 * 1000 // 10 —Å–µ–∫—É–Ω–¥
};

// üîß Middleware
app.use(morgan("dev"));
app.use(compression());
app.use(cors({
  origin: "*",
  methods: ["POST", "OPTIONS"],
  allowedHeaders: ["Content-Type", "Authorization"]
}));

// –ü—Ä–æ–≤–µ—Ä–∫–∞ Content-Type
app.use((req, res, next) => {
  if (req.method === "POST" && req.path === "/api/cars/combined") {
    const contentType = req.headers["content-type"] || "";
    if (!contentType.includes("application/json")) {
      return res.status(415).json({ success: false, error: "Content-Type must be application/json" });
    }
  }
  next();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ JSON —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
app.use(express.json({
  strict: true,
  verify: (req, res, buf) => {
    try {
      JSON.parse(buf);
    } catch {
      throw new Error("Invalid JSON");
    }
  }
}));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ JSON
app.use((err, req, res, next) => {
  if (err.message === "Invalid JSON") {
    return res.status(400).json({ success: false, error: "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON" });
  }
  next(err);
});

// –•–µ–ª–ø–µ—Ä: SHA1-—Å–∏–≥–Ω–∞—Ç—É—Ä–∞
function generateSignature(jsonBody, apiKey) {
  return crypto.createHash("sha1").update(jsonBody + apiKey).digest("hex");
}

// –ó–∞–ø—Ä–æ—Å –∫ CRM
async function fetchCars(url, apiKey, filterOwnerId) {
  const timestamp = Math.floor(Date.now() / 1000);
  const requestData = {
    timestamp,
    filters: { filter_owner_id: filterOwnerId },
    items: 100,
    offset: 0
  };

  const jsonRequest = JSON.stringify(requestData);
  const signature = generateSignature(jsonRequest, apiKey);

  const response = await axios.post(url, requestData, {
    headers: {
      "Authorization": signature,
      "Content-Type": "application/json"
    }
  });

  return response.data;
}

// üöò –û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç

app.post("/api/cars/combined", async (req, res) => {
  try {
    const { items = 30, offset = 0 } = req.body;

    const now = Date.now();
    // if (carCache.data && now - carCache.timestamp < carCache.duration) {
    //   const paginatedCars = carCache.data.slice(offset, offset + items);
    //   return res.json({ success: true, cars_list: paginatedCars });
    // }
    if (carCache.data && now - carCache.timestamp < carCache.duration) {
      const paginatedCars = carCache.data.slice(offset, offset + items);
      console.log(`üì¶ –û—Ç–¥–∞—ë–º ${paginatedCars.length} –∞–≤—Ç–æ –∏–∑ –∫—ç—à–∞ (offset: ${offset}, items: ${items})`);
      return res.json({ success: true, cars_list: paginatedCars });
    }
    

    const accounts = [
      {
        url: "https://premiergroup.taxicrm.ru/api/public/v1/cars/list",
        apiKey: "ff841cef5fb5602e51ae7432230078906c9577af",
        ownerIds: ["cc9af95f-1f44-557a-89ab-d2c6e36d7e9d"]
      },
      {
        url: "https://premierm.taxicrm.ru/api/public/v1/cars/list",
        apiKey: "c7611ef537404fad4ac7043a2b3d148caf71328d",
        ownerIds: ["5ca94f01-64a1-5e14-9d22-4a69d0851e77"]
      },
      {
        url: "https://premierplus.taxicrm.ru/api/public/v1/cars/list",
        apiKey: "f6bb44ed1116ca11dd5eeae3772f41c6ef6f90e7",
        ownerIds: ["08bd7d68-9c8f-5d7c-b73c-5fca59168f7b", "164b685f-ca1b-5ac6-9f59-3ee0fa42e98a"]
      }
    ];

// üì© –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ü–æ—á—Ç—É
app.post("/api/send-request", async (req, res) => {
  const { name, phone, request } = req.body;

  if (!name || !phone) {
    return res.status(400).json({ success: false, message: "–ò–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
  }

  const transporter = nodemailer.createTransport({
    host: "smtp.yandex.ru",
    port: 465,
    secure: true,
    auth: {
      user: "Premier-Group-order@yandex.ru",
      pass: "9ad-8Ce-9Fv-ECc"
    }
  });

  const mailOptions = {
    from: "Premier-Group-order@yandex.ru",
    to: "Premier-Group-order@yandex.ru", // –∏–ª–∏ –¥—Ä—É–≥—É—é –ø–æ—á—Ç—É
    subject: "–ó–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞",
    html: `
      <h2>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</h2>
      <p><strong>–ò–º—è:</strong> ${name}</p>
      <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${phone}</p>
      <p><strong>–ñ–µ–ª–∞–µ–º–∞—è –º–∞—à–∏–Ω–∞:</strong> ${request || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
    `
  };

  try {
    await transporter.sendMail(mailOptions);
    res.json({ success: true });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", error);
    res.status(500).json({ success: false, message: "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞" });
  }
});

    const promises = accounts.flatMap(account =>
      account.ownerIds.map(async ownerId => {
        try {
          const data = await fetchCars(account.url, account.apiKey, ownerId);
          if (data.success && data.cars_list) {
            const list = Array.isArray(data.cars_list)
              ? data.cars_list
              : Object.values(data.cars_list);
    
            const filtered = list.filter(car => car.status === 20);
    
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${filtered.length} –∞–≤—Ç–æ —É –≤–ª–∞–¥–µ–ª—å—Ü–∞ ${ownerId}:`);
            filtered.forEach(car => {
              console.log(`‚Üí ${car.brand || ''} ${car.model || ''} | ${car.number || '‚Äî'} | –°—Ç–∞—Ç—É—Å: ${car.status}`);
            });
    
            return filtered;
          } else {
            console.warn(`‚ö†Ô∏è –ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç ${account.url}`);
          }
        } catch (err) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ ${account.url} –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ ${ownerId}:`, err.message);
        }
    
        return []; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã Promise.all –Ω–µ –ª–æ–º–∞–ª—Å—è
      })
    );
    
    const results = await Promise.all(promises);
    const allCars = results.flat();
    

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ ID
    const uniqueCars = Array.from(new Set(allCars.map(car => car.id)))
      .map(id => {
        return allCars.find(car => car.id === id);
      });

    console.log(`\nüöó –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–≤—Ç–æ: ${uniqueCars.length}`);
    uniqueCars.forEach((car, i) => {
      console.log(`#${i + 1}: ${car.brand || ''} ${car.model || ''} (${car.number || '‚Äî'})`);
    });

    // –°–∂–∏–º–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    // const reducedCars = uniqueCars.map(car => ({
    //   id: car.id,
    //   brand: car.brand,
    //   model: car.model,
    //   year: car.year,
    //   avatar: car.avatar,
    //   color: car.color,
    //   number: car.number,
    //   odometer: car.odometer_manual? `${car.odometer_manual.toLocaleString("ru-RU")} –∫–º`: (car.odometer ? `${car.odometer.toLocaleString("ru-RU")} –∫–º` : "‚Äî"), // ‚úÖ –ø—Ä–æ–±–µ–≥
    //   fuel_type: car.fuel_type,
    //   transmission: car.transmission,    // ‚úÖ —Ç–∏–ø –ö–ü–ü
    //   equipment: car.equipment,          // ‚úÖ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è
    // }));

    const reducedCars = uniqueCars.map(car => {
      const odoRaw = car.odometer_manual ?? car.odometer; // üëà –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤–æ–µ –≤–∞–ª–∏–¥–Ω–æ–µ
      const odo = typeof odoRaw === 'number' ? odoRaw : 0;
    
      return {
        id: car.id,
        brand: car.brand,
        model: car.model,
        year: car.year,
        avatar: car.avatar,
        color: car.color,
        number: car.number,
        odometer: odo, // —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        odometer_display: odo ? `${odo.toLocaleString("ru-RU")} –∫–º` : "‚Äî", // —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
        fuel_type: car.fuel_type,
        transmission: car.transmission,
        equipment: car.equipment
      };
    });
    

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
    carCache.data = reducedCars;
    carCache.timestamp = Date.now();

    const paginatedCars = reducedCars.slice(offset, offset + items);
    res.json({ success: true, cars_list: paginatedCars });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è:", error.message);
    res.status(500).json({ success: false, error: error.message });
  }
});

// üîó –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–∞
const frontendPath = "/var/www/autofinanceapp.ru/public";
app.use(express.static(frontendPath));

app.get("/", (req, res) => {
  res.sendFile(path.join(frontendPath, "index.html"));
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Telegram-–±–æ—Ç–∞
require("./bot/bot.js");

// ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
